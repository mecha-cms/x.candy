---
title: Candy
description: Insert global variables into the page.
icon: 'M15.54 8.46C17.5 10.42 17.5 13.58 15.54 15.54S10.42 17.5 8.47 15.54 6.5 10.42 8.47 8.46 13.58 6.5 15.54 8.46M19.47 4.55C19.47 4.55 18.5 4.67 17.43 5.36C17.28 4.32 16.78 3.27 15.93 2.42C14.68 3.66 14.53 5.22 14.83 6.34C16.22 6.7 17.3 7.78 17.66 9.17C18.78 9.47 20.34 9.32 21.58 8.07C20.74 7.23 19.71 6.74 18.68 6.58C19.07 6 19.38 5.33 19.47 4.55M4.53 19.45C4.53 19.45 5.5 19.33 6.57 18.64C6.72 19.68 7.22 20.73 8.07 21.58C9.32 20.34 9.47 18.78 9.17 17.66C7.78 17.3 6.7 16.22 6.34 14.83C5.22 14.53 3.66 14.68 2.42 15.93C3.26 16.77 4.29 17.27 5.32 17.42C4.93 18 4.62 18.68 4.53 19.45Z'
color: '#f74f57'
author: Taufik Nurrohman
type: Markdown
version: 2.0.1
...

The name “candy” was retained for its legacy syntax, which is a syntax delimited by an opening <code>&#x25;&#x7b;</code>
and a closing <code>&#x7d;&#x25;</code>, making it look like a candy (at least that’s how I saw it):

<pre><code class="html">Your name is &#x25;&#x7b;user.author&#x7d;&#x25;, obviously!</code></pre>

Looking at how the web has evolved to date, it seems that people are more likely to prefer the variable syntax that was
introduced by [Jinja][jinja], [Liquid][liquid], [Mustache][mustache], and [Twig][twig]. And so, I decided to support a
similar syntax without having to incorporate it into a new extension to reduce maintenance frequency:

<pre><code class="html">Your name is &#x7b;&#x7b; user.author &#x7d;&#x7d;, obviously!</code></pre>

 [jinja]: https://jinja.palletsprojects.com/en/3.1.x/templates#variables
 [liquid]: https://shopify.github.io/liquid/tags/variable
 [mustache]: https://mustache.github.io/mustache.5.html
 [twig]: https://twig.symfony.com/doc/3.x/templates.html#variables

However, this feature is very limited and is meant to be read-only. The first token before the dot only accepts variable
data in the form of an object or scalar. This extension does not accept array as the initial variable data to prevent
outsiders from inspecting sensitive global variables such as `$_COOKIE`, `$_SERVER`, and `$_SESSION`. Array data that is
present after the first call to a property or method of an object is allowed.

If you want to manually provide some information from these sensitive variables using the syntax, you will need to add
it to a new global variable and convert the data to an object or scalar so that it can be accepted by the parser:

~~~ .php
$GLOBALS['server'] = (object) [
    'host' => $_SERVER['HTTP_HOST'],
    'port' => $_SERVER['SERVER_PORT']
];

$GLOBALS['server_host'] = $_SERVER['HTTP_HOST'];
~~~

You can then get the value by inserting this syntax into the page content:

<pre><code class="html">&#x7b;&#x7b; server.host &#x7d;&#x7d;

&#x7b;&#x7b; server_host &#x7d;&#x7d;</code></pre>

### Examples

Syntax | Description
------ | -----------
<code style="white-space: nowrap;">&#x7b;&#x7b; var &#x7d;&#x7d;</code> | Prints the value of `$var`. If `$var` is an array, then this syntax will be left as it is. If `$var` is an object, then this syntax will tries to call `$var->__invoke()` or `$var->__toString()` method to return its value.
<code style="white-space: nowrap;">&#x7b;&#x7b;&amp; var &#x7d;&#x7d;</code> | Prints the value of `$var` as raw HTML (by default, the value is always HTML-escaped).
<code style="white-space: nowrap;">&#x7b;&#x7b; var.var &#x7d;&#x7d;</code> | Prints the value of `$var->var` or `$var->var()` or `$var->__get('var')` or `$var->offsetGet('var')` or `$var->__call('var')`.
<code style="white-space: nowrap;">&#x7b;&#x7b; var.var.var &#x7d;&#x7d;</code> | Recursive calls as in the previous syntax. The final value will then be turned into a string.
<code style="white-space: nowrap;">&#x7b;&#x7b; var.var-var &#x7d;&#x7d;</code> | Prints the value of `$var->varVar` or `$var->varVar()` or `$var->__get('varVar')` or `$var->offsetGet('varVar')` or `$var->__call('varVar')`.
<code style="white-space: nowrap;">&#x7b;&#x7b; var.varVar &#x7d;&#x7d;</code> | Prints the value of `$var->varVar` or `$var->varVar()` or `$var->__get('varVar')` or `$var->offsetGet('varVar')` or `$var->__call('varVar')`.

Writing literal syntax for presentation purposes can be done by separating part of the entire syntax with HTML elements,
or by substituting the delimiters with their HTML entity characters:

<pre><code class="html">&lt;span&gt;&#x25;&#x7b; var&lt;/span&gt; &#x7d;&#x25;</code></pre>
<pre><code class="html">&lt;span&gt;&#x7b;&#x7b; var&lt;/span&gt; &#x7d;&#x7d;</code></pre>
<pre><code class="html">&amp;#x25;&amp;#x7b; var &amp;#x7d;&amp;#x25;</code></pre>
<pre><code class="html">&amp;#x7b;&amp;#x7b; var &amp;#x7d;&amp;#x7d;</code></pre>